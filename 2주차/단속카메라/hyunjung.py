# programmers L3 : 단속카메라
# DATE : 2020.01.13
# Greedy 알고리즘



# 1. 진입기준 정렬 : 맨 마지막의 진입시점에 cctv 설치하고 모든 차량의 진출시점이 그 이후면 한대만 설치해도 됨
# 2. 시작점([0][0])에서 cctv 설치하고 시작 ( count = 1)
# 3. routes[1:] : 시작점 이미 포함시켰기 때문에 첫 번째 이후의 값 for 탐색
# 4. 이후 차량의 진출시점 확인
#   4-1. 진출 시점이 now(현재) 설치되어있는 시점보다 크거나 같으면 새로운 카메라 설치 필요 x
#   4-2. 작다면 새로운 카메라 설치. 진입시점에 설치

# routes = [[-20, 15], [-14, -5], [-18, -13], [-5, -3]]
# -5, -14, -18, -20

def solution(routes):
    routes.sort(key=lambda x: x[0], reverse=True) # 진입지점이 뒤에 있는 것부터 정렬
    count = 1 # 진입지점에서 cctv설치하고 시작
    now = routes[0]
    for i in routes[1:]:
        if i[1] >= now:
            continue
        else:
            now = i[0]
            count += 1
    return count
    
    
  
    * Lambda 함수(익명함수)
    def와 동일한 역할. 함수명이 정해지지 않고 일회성으로 사용되는 함수
      - 특징
         1. 메모리 절약 : 일반적인 함수는 객체로써 메모리 할당 받음
                          lambda는 실행이 될 경우에만 메모리 할당 (일회성 사용)
         2. 가독성 향상 : 간결한 코드
         3. 함수 매개변수 대입 : 다른 함수의 매개변수로 lambda함수 사용 가능
